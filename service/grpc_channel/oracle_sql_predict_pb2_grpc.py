# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import service.grpc_channel.oracle_sql_predict_pb2 as oracle__sql__predict__pb2


class OracleSQLPredictRequesterStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SQLPredict = channel.unary_unary(
        '/OracleSQLPredict.OracleSQLPredictRequester/SQLPredict',
        request_serializer=oracle__sql__predict__pb2.OracleSQLPredictRequest.SerializeToString,
        response_deserializer=oracle__sql__predict__pb2.OracleSQLPredictResponse.FromString,
        )


class OracleSQLPredictRequesterServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SQLPredict(self, request, context):
    """Sends a requesting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OracleSQLPredictRequesterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SQLPredict': grpc.unary_unary_rpc_method_handler(
          servicer.SQLPredict,
          request_deserializer=oracle__sql__predict__pb2.OracleSQLPredictRequest.FromString,
          response_serializer=oracle__sql__predict__pb2.OracleSQLPredictResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'OracleSQLPredict.OracleSQLPredictRequester', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
