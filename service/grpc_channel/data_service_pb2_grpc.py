# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import service.grpc_channel.data_service_pb2 as data__service__pb2


class DataServiceRequesterStub(object):
  """The requesting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendDataServiceRequest = channel.unary_unary(
        '/DataService.DataServiceRequester/SendDataServiceRequest',
        request_serializer=data__service__pb2.DataServiceRequest.SerializeToString,
        response_deserializer=data__service__pb2.DataServiceResponse.FromString,
        )


class DataServiceRequesterServicer(object):
  """The requesting service definition.
  """

  def SendDataServiceRequest(self, request, context):
    """Sends a requesting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DataServiceRequesterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendDataServiceRequest': grpc.unary_unary_rpc_method_handler(
          servicer.SendDataServiceRequest,
          request_deserializer=data__service__pb2.DataServiceRequest.FromString,
          response_serializer=data__service__pb2.DataServiceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DataService.DataServiceRequester', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
