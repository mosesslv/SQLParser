"""
Django settings for sqlreview project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from corsheaders.defaults import default_headers

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# 读取额外的配置
if os.path.exists(os.path.join(BASE_DIR, 'config.ini')):
    conf_obj = configparser.ConfigParser()
    conf_obj.read(os.path.join(BASE_DIR, 'config.ini'), encoding="utf-8")
    debug_settings = dict(conf_obj.items('DEBUG'))
    db_settings = dict(conf_obj.items('DB'))
    celery_settings = dict(conf_obj.items('CELERY'))
    redis_settings = dict(conf_obj.items('REDIS'))
    cache_settings = dict(conf_obj.items('CACHES'))
    log_settings = dict(conf_obj.items('LOG'))
    oracle_settings = dict(conf_obj.items('ORACLE'))
    license_settings = dict(conf_obj.items('LICENSE'))
    API_DOCS = dict(conf_obj.items('API_DOCS')).get('api_docs', '')
else:
    raise Exception('config not found')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%1w*fne+4cvpd_js8edtnuks+vsqtl2^sbxoa)!xcxx^rj0haj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = debug_settings.get('debug') == '1'

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'common',                       # common tools
    'service',                      # base service module
    'test',                         # test unit
    'cli',                          # command
    'api_service.pallas_api',
    'rest_framework.authtoken',
    'rest_framework',
]

SILENCED_SYSTEM_CHECKS = ['mysql.E001']
BROKER_URL = celery_settings.get('broker_url')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = celery_settings.get('celery_result_backend')
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_RESULT_EXPIRES = 3600
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYD_CONCURRENCY = celery_settings.get('celeryd_concurrency')
CELERYD_MAX_TASKS_PER_CHILD = celery_settings.get('celeryd_max_tasks_per_child')
CELERY_IMPORTS = ("api_service.pallas_api.tasks",)

CELERY_QUEUES = {
    'default': {
        'binding_key': 'default',
        'routing_key': 'default'
    },
    'review': {
        'binding_key': 'review',
        'routing_key': 'review'
    }
}

CELERY_ROUTES = {
    'api_service.pallas_api.tasks.async_exec_task_by_git': {'queue': 'default', 'routing_key': 'default'},
    'api_service.pallas_api.tasks.async_exec_task_by_task_info': {'queue': 'review', 'routing_key': 'review'},
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sqlreview.urls'

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = default_headers + (
    'token',
    'tenant-id',
    'tenant-name',
    'tenant-type',
    'AUTHORIZATION',
    'PASSPORT',
)

AUTH_USER_MODEL = "pallas_api.AiSrUser"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api_service.pallas_api.auth.ExpiringTokenAuthentication',   # 根据自己的实际情况填写路径
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 全局设置
    #     'rest_framework.authentication.BasicAuthentication',
    #     'rest_framework.authentication.SessionAuthentication',
    # ),
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sqlreview.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': db_settings.get('engine'),
        'NAME': db_settings.get('name'),
        'USER': db_settings.get('user'),
        'PASSWORD': db_settings.get('password'),   # prd dpaaccPa888888
        'HOST': db_settings.get('host'),
        'PORT': db_settings.get('port'),     # Set to empty string for default.
        'OPTIONS': {
            # 'autocommit': False,
            # 'pool_size': 15,
            # 'pool_cnx': 10
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = False

USE_L10N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# ================================= 静态文件配置 =====================================
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# ========================== 项目配置定义  ===============================
ORACLE_HOME = oracle_settings.get('oracle_home')
os.putenv('ORACLE_HOME', ORACLE_HOME)
os.putenv('LD_LIBRARY_PATH', ORACLE_HOME)
os.putenv('DYLD_LIBRARY_PATH', ORACLE_HOME)

REDIS_SERVER = redis_settings.get('redis_server')

# ========================== logging config ===============================
LOG_ROOT = log_settings.get('log_path')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s] [%(name)s:%(lineno)d] [%(levelname)s]- %(message)s'
        },
    },
    'filters': {
        'slow_sql': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: record.duration > 0.1
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_ROOT, 'sqlreview.log'),
            'when': 'MIDNIGHT',
            'backupCount': 10,
            'encoding': 'utf8',
            'interval': 1,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        '': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': False
        },
        'api_service': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}

# ========================== local grpc server config ===============================
SQLPREDICT_GRPC_PORT = 50055
SQLPREDICT_GRPC_AUTH_STRING = "lufax_grpc_auth"
SQLPREDICT_GRPC_AUTH_CODE = "804"

PALLAS = {
    'SSO_URL': 'http://sso.devops.lufax.tool/passport',
    # 'SSO_URL': 'http://sso.lujs.cn/passport',
    'SSO_APP_SECRET': "J8x4HkXjxS4nJKbb",
    'SSO_APP_ID': "87",
}

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

LICENSE_KEY = f'${license_settings.get("license")[::-1]}=='

# caches缓存，
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": cache_settings.get('default_location'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
