# -*- coding: utf-8 -*-
"""
Created on Wed Jan 23 09:47:26 2019

@author: liujun693
"""
import xml.etree.ElementTree
import json
import base64
import datetime
import copy
import time

from .internal import HelperMethods


class ActivatedMachine:
    def __init__(self, IP, Mid, Time):
        self.IP = IP
        self.Mid = Mid

        # TODO: check if time is int, and convert to datetime in this case.
        self.Time = Time


class LicenseKey:

    def __init__(self, id, app_id, cutdate, enabled, memo, hwid, remaining, token,
                 license_expires, last_activation_ts, last_activation_ip, license_start_ts, RawResponse):
        self.id = id
        self.app_id = app_id
        self.cutdate = cutdate
        self.enabled = enabled
        self.memo = memo
        self.hwid = hwid
        self.remaining = remaining
        self.token = token
        self.license_expires = license_expires
        self.last_activation_ts = last_activation_ts
        self.last_activation_ip = last_activation_ip
        self.license_start_ts = license_start_ts
        self.raw_response = RawResponse

    @staticmethod
    def from_response(response):

        if response.result == "failure":
            raise ValueError(
                "The response did not contain any license key object since it was unsuccessful. Message '{0}'.".format(
                    response.message))

        obj = json.loads(base64.b64decode(response.license_key).decode('utf-8'))

        return LicenseKey(obj["id"],
                          obj["app_id"],
                          datetime.datetime.strptime(obj["cutdate"], '%Y-%m-%d %H:%M:%S'),
                          obj["enabled"],
                          obj["memo"],
                          [obj["hwids"]], obj["remaining"],
                          obj["token"], obj["license_expires"], obj["last_activation_ip"],
                          datetime.datetime.strptime(obj["last_activation_ts"], '%Y-%m-%d %H:%M:%S'),
                          datetime.datetime.strptime(obj["license_start_ts"], '%Y-%m-%d %H:%M:%S'),
                          response)

    def save_as_string(self):
        """
        Save the license as a string that can later be read by load_from_string.
        """
        res = copy.copy(self.raw_response.__dict__)
        res["licenseKey"] = res["license_key"]
        res.pop("license_key", None)
        return json.dumps(res)

    @staticmethod
    def load_from_string(string, signature_expiration_interval=-1):
        """
        Loads a license from a string generated by save_as_string.
        Note: if an error occurs, None will be returned. An error can occur
        if the license string has been tampered with or if the public key is
        incorrectly formatted.

        :param signature_expiration_interval: If the license key was signed,
        this method will check so that no more than "signatureExpirationInterval"
        days have passed since the last activation.
        """

        response = Response("", "", "", "")

        try:
            response = Response.from_string(string)
        except Exception:
            return None

        if response.result == "failure":
            return None
        else:
            try:

                licenseKey = LicenseKey.from_response(response)
                if licenseKey.license_expires > 0 and \
                        (licenseKey.license_start_ts + datetime.timedelta(
                            days=1 * licenseKey.license_expires) < datetime.datetime.utcnow()):
                    return None

                return licenseKey
            except Exception:
                return None

    @staticmethod
    def __load_activated_machines(obj):

        if obj == None:
            return None

        arr = []

        for item in obj:
            arr.append(ActivatedMachine(**item))

        return arr


class Response:

    def __init__(self, license_key, signature, result, message):
        self.license_key = license_key
        self.signature = signature
        self.result = result
        self.message = message

    @staticmethod
    def from_string(responseString):
        obj = json.loads(responseString)

        licenseKey = ""
        signature = ""
        result = 0
        message = ""

        if "licenseKey" in obj:
            licenseKey = obj["licenseKey"]

        if "signature" in obj:
            signature = obj["signature"]

        if "message" in obj:
            message = obj["message"]

        if "result" in obj:
            result = obj["result"]
        else:
            result = 1

        return Response(licenseKey, signature, result, message)

